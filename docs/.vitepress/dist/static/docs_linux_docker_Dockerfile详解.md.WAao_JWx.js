import{_ as e,c as a,o as i,a3 as l}from"./chunks/framework.BSgsMaz1.js";const f=JSON.parse('{"title":"8_Dockerfile详解","description":"","frontmatter":{"icon":"docker"},"headers":[],"relativePath":"docs/linux/docker/Dockerfile详解.md","filePath":"docs/linux/docker/Dockerfile详解.md","lastUpdated":1714888091000}'),o={name:"docs/linux/docker/Dockerfile详解.md"},r=l(`<h1 id="_8-dockerfile详解" tabindex="-1">8_Dockerfile详解 <a class="header-anchor" href="#_8-dockerfile详解" aria-label="Permalink to &quot;8_Dockerfile详解&quot;">​</a></h1><h2 id="dockerfile概述" tabindex="-1">Dockerfile概述 <a class="header-anchor" href="#dockerfile概述" aria-label="Permalink to &quot;Dockerfile概述&quot;">​</a></h2><p>Dockerfile是一种用于定义Docker镜像构建过程的文本文件，它由一系列构建镜像所必需的指令和参数组成。</p><h3 id="官方文档地址" tabindex="-1">官方文档地址 <a class="header-anchor" href="#官方文档地址" aria-label="Permalink to &quot;官方文档地址&quot;">​</a></h3><ul><li><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer">Dockerfile 构建规范</a></li></ul><h3 id="构建步骤概览" tabindex="-1">构建步骤概览 <a class="header-anchor" href="#构建步骤概览" aria-label="Permalink to &quot;构建步骤概览&quot;">​</a></h3><ol><li><strong>编写Dockerfile</strong><ul><li>创建包含Docker镜像构建指令的文本文件。</li></ul></li><li><strong>构建镜像</strong><ul><li>使用 <code>docker build</code> 命令根据Dockerfile构建镜像。</li></ul></li><li><strong>运行镜像</strong><ul><li>使用 <code>docker run</code> 命令运行构建好的镜像。</li></ul></li></ol><h2 id="dockerfile构建流程" tabindex="-1">Dockerfile构建流程 <a class="header-anchor" href="#dockerfile构建流程" aria-label="Permalink to &quot;Dockerfile构建流程&quot;">​</a></h2><h3 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h3><ul><li>指令格式 <ul><li>每条指令必须大写，并且后跟至少一个参数。</li><li>指令按顺序执行，从上到下。</li><li>使用 <code>#</code> 表示注释，注释内容会被忽略。</li><li>每条指令执行完后，都会创建一个新的镜像层并提交。</li></ul></li></ul><h3 id="构建过程详情" tabindex="-1">构建过程详情 <a class="header-anchor" href="#构建过程详情" aria-label="Permalink to &quot;构建过程详情&quot;">​</a></h3><ol><li><strong>基于基础镜像创建容器</strong></li><li><strong>执行Dockerfile中的指令并修改容器</strong></li><li><strong>执行类似 <code>docker commit</code> 操作，提交新的镜像层</strong></li><li><strong>基于新提交的镜像创建新的容器</strong></li><li><strong>继续执行Dockerfile中的下一条指令，直至所有指令执行完毕</strong></li></ol><h3 id="dockerfile常用指令" tabindex="-1">Dockerfile常用指令 <a class="header-anchor" href="#dockerfile常用指令" aria-label="Permalink to &quot;Dockerfile常用指令&quot;">​</a></h3><h4 id="from" tabindex="-1">FROM <a class="header-anchor" href="#from" aria-label="Permalink to &quot;FROM&quot;">​</a></h4><ul><li>作用：指定基础镜像，Dockerfile的第一条指令必须是 <code>FROM</code>，作为后续构建的基础模板。</li></ul><h4 id="maintainer-已废弃" tabindex="-1">MAINTAINER（已废弃） <a class="header-anchor" href="#maintainer-已废弃" aria-label="Permalink to &quot;MAINTAINER（已废弃）&quot;">​</a></h4><ul><li>作用：声明镜像维护者的信息，现推荐使用 <code>LABEL</code> 指令替代，例如 <code>LABEL maintainer=&quot;Your Name &lt;email@example.com&gt;&quot;</code>。</li></ul><h4 id="run" tabindex="-1">RUN <a class="header-anchor" href="#run" aria-label="Permalink to &quot;RUN&quot;">​</a></h4><ul><li><p>作用：执行构建镜像过程中的命令。</p><ul><li>语法格式： <ul><li><code>RUN &quot;&lt;命令行命令&gt;&quot;</code></li><li><code>RUN [可执行文件, 参数1, 参数2]</code></li></ul></li><li>注意：<code>RUN</code> 指令在 <code>docker build</code> 时执行。</li></ul></li></ul><h4 id="expose" tabindex="-1">EXPOSE <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;EXPOSE&quot;">​</a></h4><ul><li>作用：声明当前容器对外暴露的端口。</li></ul><h4 id="workdir" tabindex="-1">WORKDIR <a class="header-anchor" href="#workdir" aria-label="Permalink to &quot;WORKDIR&quot;">​</a></h4><ul><li>作用：指定在创建容器后，终端默认登录的工作目录。</li></ul><h4 id="user" tabindex="-1">USER <a class="header-anchor" href="#user" aria-label="Permalink to &quot;USER&quot;">​</a></h4><ul><li>作用：指定镜像运行时的用户，默认为 <code>root</code> 用户。</li></ul><h4 id="env" tabindex="-1">ENV <a class="header-anchor" href="#env" aria-label="Permalink to &quot;ENV&quot;">​</a></h4><ul><li>作用：在构建镜像过程中设置环境变量。</li></ul><h4 id="add" tabindex="-1">ADD <a class="header-anchor" href="#add" aria-label="Permalink to &quot;ADD&quot;">​</a></h4><ul><li>作用：将宿主机目录下的文件或目录拷贝进镜像，支持URL和自动处理tar压缩包。</li></ul><h4 id="copy" tabindex="-1">COPY <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;COPY&quot;">​</a></h4><ul><li>作用：类似于 <code>ADD</code>，拷贝文件和目录到镜像中，从构建上下文目录的源路径复制到镜像内目标路径。</li></ul><h4 id="volume" tabindex="-1">VOLUME <a class="header-anchor" href="#volume" aria-label="Permalink to &quot;VOLUME&quot;">​</a></h4><ul><li>作用：声明容器数据卷，用于数据持久化存储。</li></ul><h4 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h4><ul><li>作用 <ul><li>指定容器启动后的默认行为。</li><li>Dockerfile中可以有多个 <code>CMD</code> 指令，但最终只有最后一个 <code>CMD</code> 生效，且会被 <code>docker run</code> 后面的参数替换。</li><li><code>CMD</code> 在 <code>docker run</code> 时执行，而 <code>RUN</code> 在 <code>docker build</code> 时执行。</li></ul></li></ul><h4 id="entrypoint" tabindex="-1">ENTRYPOINT <a class="header-anchor" href="#entrypoint" aria-label="Permalink to &quot;ENTRYPOINT&quot;">​</a></h4><ul><li><p>作用：用于指定容器启动时运行的命令。</p><ul><li>不会被 <code>docker run</code> 后面的命令覆盖，其参数会被追加到 <code>ENTRYPOINT</code> 指定的程序。</li><li><code>ENTRYPOINT</code> 可以和 <code>CMD</code> 一起使用，一般在需要动态参数的情况下使用 <code>CMD</code> 为 <code>ENTRYPOINT</code> 传参。</li><li>当设置了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将作为参数传递给 <code>ENTRYPOINT</code>，二者结合如同 <code>entrypoint cmd</code>。</li><li>在执行 <code>docker run</code> 时可以指定 <code>ENTRYPOINT</code> 运行所需的参数。</li><li>若 Dockerfile 中存在多个 <code>ENTRYPOINT</code> 指令，仅最后一个生效。</li></ul></li></ul><h3 id="构建步骤重述" tabindex="-1">构建步骤重述 <a class="header-anchor" href="#构建步骤重述" aria-label="Permalink to &quot;构建步骤重述&quot;">​</a></h3><ol><li>编写Dockerfile文件。</li><li>执行 <code>docker build -t 新镜像名字:tag .</code> 构建镜像。</li><li>使用 <code>docker run -it 镜像名:tag</code> 运行构建好的镜像。</li></ol><h3 id="处理虚悬镜像" tabindex="-1">处理虚悬镜像 <a class="header-anchor" href="#处理虚悬镜像" aria-label="Permalink to &quot;处理虚悬镜像&quot;">​</a></h3><p>带有仓库名和标签均为 <code>&lt;none&gt;</code> 的镜像被称为“虚悬镜像”。</p><p>Bash</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看虚悬镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dangling=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 删除虚悬镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span></code></pre></div>`,43),d=[r];function c(t,s,n,h,u,k){return i(),a("div",null,d)}const b=e(o,[["render",c]]);export{f as __pageData,b as default};
