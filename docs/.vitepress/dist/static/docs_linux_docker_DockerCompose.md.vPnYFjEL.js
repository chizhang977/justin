import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.CrrYOWPS.js";const g=JSON.parse('{"title":"9_1_Docker Compose","description":"","frontmatter":{"icon":"docker"},"headers":[],"relativePath":"docs/linux/docker/DockerCompose.md","filePath":"docs/linux/docker/DockerCompose.md","lastUpdated":null}'),l={name:"docs/linux/docker/DockerCompose.md"},p=n(`<h1 id="_9-1-docker-compose" tabindex="-1">9_1_Docker Compose <a class="header-anchor" href="#_9-1-docker-compose" aria-label="Permalink to &quot;9_1_Docker Compose&quot;">​</a></h1><hr><h3 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>Docker Compose，作为一个强大的工具，极大地简化了多容器应用程序的定义和管理。本文将全面介绍Docker Compose的知识点，涵盖其基础概念、核心功能、配置详解以及实战应用，帮助你更好地管理和部署基于容器的应用程序。</p><p><a href="http://docs.docker.com/compose" target="_blank" rel="noreferrer">http://docs.docker.com/compose</a></p><h4 id="一、docker-compose简介" tabindex="-1">一、Docker Compose简介 <a class="header-anchor" href="#一、docker-compose简介" aria-label="Permalink to &quot;一、Docker Compose简介&quot;">​</a></h4><p>Docker Compose是Docker官方推出的用于定义和运行多容器Docker应用程序的工具。通过YAML文件（通常命名为<code>docker-compose.yml</code>），您可以一次性定义一组相关的服务、网络和卷，然后通过一个简单的命令即可启动和停止整个应用程序的所有服务。</p><p>安装步骤就不说了，直接按照官方的来更加方便。<a href="https://docs.docker.com/compose/install/linux/#install-using-the-repository" target="_blank" rel="noreferrer">https://docs.docker.com/compose/install/linux/#install-using-the-repository</a></p><h4 id="二、docker-compose的核心概念" tabindex="-1">二、Docker Compose的核心概念 <a class="header-anchor" href="#二、docker-compose的核心概念" aria-label="Permalink to &quot;二、Docker Compose的核心概念&quot;">​</a></h4><ol><li><strong>服务(Service)</strong> 在Docker Compose中，服务代表一个容器（Mysql，Redis，库存微服务等），定义了镜像、环境变量、端口映射、依赖关系等内容。您可以指定服务的数量（副本数）和启动顺序。</li><li><strong>网络(Network)</strong> Docker Compose允许创建自定义网络，服务可以通过网络相互通信。默认情况下，Compose会创建一个名为<code>default</code>的网络，将所有服务连接到此网络。</li><li><strong>卷(Volumes)</strong> 卷用来持久化存储数据，即使容器被删除，数据也能得以保留。在Compose文件中，可以声明哪些目录或文件需要挂载为持久化卷。</li><li><strong>依赖(Dependencies)</strong> 可以设置服务之间的依赖关系，确保在启动或重启时，先启动依赖的服务，后启动依赖于它的服务。</li></ol><h4 id="三、docker-compose三步骤" tabindex="-1">三、Docker Compose三步骤 <a class="header-anchor" href="#三、docker-compose三步骤" aria-label="Permalink to &quot;三、Docker Compose三步骤&quot;">​</a></h4><ul><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用docker-compose.yaml定义一个完整的业务单元，各个容器服务</li><li>最后执行docker-compose up命令来启动并运行整个应用程序，完成一键部署</li></ul><h4 id="四、docker-compose命令" tabindex="-1">四、Docker Compose命令 <a class="header-anchor" href="#四、docker-compose命令" aria-label="Permalink to &quot;四、Docker Compose命令&quot;">​</a></h4><p>类似于docker命令，比较学习</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Compose常用命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           # 查看帮助</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           # 启动所有docker-compose服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 启动所有docker-compose服务并后台运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 停止并删除容器、网络、卷、镜像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  yml里面的服务id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      #</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 展示当前docker-compose编排过的运行的所有容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     #</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 展示当前docker-compose编排过的容器进程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  yml里面的服务id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 查看容器输出日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 检查配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 检查配置，有问题才有输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 重启服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 启动服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 停止服务</span></span></code></pre></div><h4 id="三、docker-compose文件详解" tabindex="-1">三、Docker Compose文件详解 <a class="header-anchor" href="#三、docker-compose文件详解" aria-label="Permalink to &quot;三、Docker Compose文件详解&quot;">​</a></h4><p>一个典型的<code>docker-compose.yml</code>文件结构如下：</p><p>Yaml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">1version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Compose文件版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">3services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">4  web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">5    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">6    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">7      - &quot;80:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">8    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">9      - mynetwork</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">10    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">11      - db</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">12  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">13    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql:5.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">14    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">15      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">16    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">17      - db_data:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">18    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">19      - mynetwork</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">21networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">22  mynetwork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">24volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">25  db_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><ul><li><code>version</code>: 指定Compose文件格式版本。</li><li><code>services</code>: 定义了两个服务，分别是web和db，分别对应Nginx和MySQL容器。</li><li><code>ports</code>: 映射容器内部端口到宿主机端口。</li><li><code>environment</code>: 设置环境变量，如MySQL的root密码。</li><li><code>volumes</code>: 将宿主机目录或命名卷挂载到容器内。</li><li><code>depends_on</code>: 表明web服务依赖于db服务。</li><li><code>networks</code>: 自定义网络mynetwork，让web和db服务都连接到此网络。</li></ul><h4 id="四、docker-compose常用命令" tabindex="-1">四、Docker Compose常用命令 <a class="header-anchor" href="#四、docker-compose常用命令" aria-label="Permalink to &quot;四、Docker Compose常用命令&quot;">​</a></h4><ul><li><code>docker-compose up</code>：根据compose文件创建并启动所有服务。</li><li><code>docker-compose down</code>：停止并移除所有容器、网络、卷。</li><li><code>docker-compose ps</code>：查看当前所有服务的状态。</li><li><code>docker-compose restart</code>：重启所有服务。</li><li><code>docker-compose build</code>：重新构建服务的镜像。</li></ul><h4 id="五、实战应用举例" tabindex="-1">五、实战应用举例 <a class="header-anchor" href="#五、实战应用举例" aria-label="Permalink to &quot;五、实战应用举例&quot;">​</a></h4><p>在开发环境中，Docker Compose常用于快速搭建包含多种服务（如Web服务器、数据库、缓存服务等）的应用栈，方便团队成员一键启动整个项目环境，极大提高了协作效率。</p><h4 id="六、高级特性及最佳实践" tabindex="-1">六、高级特性及最佳实践 <a class="header-anchor" href="#六、高级特性及最佳实践" aria-label="Permalink to &quot;六、高级特性及最佳实践&quot;">​</a></h4><ul><li><strong>多环境配置</strong>：利用<code>.env</code>文件或环境变量覆盖Compose文件中的变量，实现多环境下的差异化配置。</li><li><strong>扩展Compose模板</strong>：通过<code>extends</code>关键字在多个Compose文件之间共享通用配置。</li><li><strong>健康检查</strong>：配置服务健康检查，确保服务在启动后能够正常工作。</li><li><strong>编排复杂应用</strong>：通过Compose文件可以轻松编排大规模、复杂的微服务架构。</li></ul><p>总结，Docker Compose不仅简化了多容器应用程序的部署和管理，而且有助于提升开发、测试和生产环境的一致性，是现代云原生应用开发的重要工具之一。熟练掌握Docker Compose的各项功能和用法，将使你在容器化应用的道路上更加得心应手。</p><h4 id="七、实例实现容器监控cadvisor-influxdb-granfana" tabindex="-1">七、实例实现容器监控<strong>CAdvisor+InfluxDB+Granfana</strong> <a class="header-anchor" href="#七、实例实现容器监控cadvisor-influxdb-granfana" aria-label="Permalink to &quot;七、实例实现容器监控**CAdvisor+InfluxDB+Granfana**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3.1&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用的 Docker Compose 版本为 3.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义名为 grafana_data 的持久化数据卷，用于存储 Grafana 的配置和数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  grafana_data:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  influxdb:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 定义 InfluxDB 服务容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tutum/influxdb:0.9</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用基于 Tutum 的 InfluxDB 镜像版本 0.9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 确保服务在退出时自动重启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    environment:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置环境变量以预先创建名为 cadvisor 的数据库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PRE_CREATE_DB=cadvisor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 映射宿主机与容器间的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;8083:8083&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # InfluxDB 管理界面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;8086:8086&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # InfluxDB API 端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 挂载宿主机目录到容器内作为数据存储路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./data/influxdb:/data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将当前目录下的 data/influxdb 挂载到容器内的 /data 目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cadvisor:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 定义 cAdvisor 服务容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> google/cadvisor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用 Google 提供的 cAdvisor 镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    links:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 建立容器间连接（依赖关系）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> influxdb:influxsrv</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将 influxdb 容器别名设置为 influxsrv</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置启动命令参数，配置 cAdvisor 数据输出至 InfluxDB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-storage_driver=influxdb&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-storage_driver_db=cadvisor&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-storage_driver_host=influxsrv:8086&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 确保服务在退出时自动重启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 映射宿主机与容器间的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;8080:8080&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cAdvisor Web UI 端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 挂载宿主机系统资源给 cAdvisor 监控使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /:/rootfs:ro</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 只读挂载根文件系统</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run:/var/run:rw</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 可读写挂载 var/run 目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys:/sys:ro</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 只读挂载 sys 文件系统</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/docker/:/var/lib/docker:ro</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 只读挂载 Docker 数据目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  grafana:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 定义 Grafana 服务容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    user:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;104&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置运行 Grafana 容器的用户 ID（可能用于特定权限需求）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grafana/grafana</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用官方提供的 Grafana 镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 确保服务在退出时自动重启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    links:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 建立容器间连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> influxdb:influxsrv</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将 influxdb 容器别名设置为 influxsrv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 映射宿主机与容器间的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3000:3000&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Grafana Web UI 端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 挂载持久化数据卷到容器内部指定路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grafana_data:/var/lib/grafana</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用之前定义的 grafana_data 卷存储 Grafana 数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    environment:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置环境变量配置 Grafana 连接 InfluxDB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTTP_USER=admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 Grafana Web UI 默认用户名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTTP_PASS=admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 Grafana Web UI 默认密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INFLUXDB_HOST=influxsrv</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 InfluxDB 服务地址，通过容器别名引用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INFLUXDB_PORT=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8086</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 InfluxDB 服务端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INFLUXDB_NAME=cadvisor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置要连接的 InfluxDB 数据库名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INFLUXDB_USER=root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 InfluxDB 用户名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INFLUXDB_PASS=root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 InfluxDB 密码</span></span></code></pre></div>`,29),k=[p];function h(e,t,r,o,d,c){return a(),i("div",null,k)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
