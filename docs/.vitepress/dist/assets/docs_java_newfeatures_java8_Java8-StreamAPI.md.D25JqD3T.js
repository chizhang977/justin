import{_ as a,c as t,o as e,a3 as r,ct as l}from"./chunks/framework.Di-rThNJ.js";const P=JSON.parse('{"title":"Stream API","description":"","frontmatter":{},"headers":[],"relativePath":"docs/java/newfeatures/java8/Java8-StreamAPI.md","filePath":"docs/java/newfeatures/java8/Java8-StreamAPI.md","lastUpdated":1716175955000}'),o={name:"docs/java/newfeatures/java8/Java8-StreamAPI.md"},i=r('<h1 id="stream-api" tabindex="-1">Stream API <a class="header-anchor" href="#stream-api" aria-label="Permalink to &quot;Stream API&quot;">​</a></h1><p>Java Stream API 是Java 8引入的一个核心特性，它为处理集合数据提供了新的思维方式和工具集。Stream API 支持函数式编程风格，允许以声明式的方式处理数据，使代码更加简洁、高效且易于理解。 <strong>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询</strong>。下面详细介绍Stream API的主要知识点：</p><h3 id="stream-概念" tabindex="-1">Stream 概念 <a class="header-anchor" href="#stream-概念" aria-label="Permalink to &quot;Stream 概念&quot;">​</a></h3><ul><li><strong>流（Stream）</strong>：不是集合数据结构，而是一种数据处理的高级抽象，它代表了数据源的计算操作序列。</li><li><strong>数据源</strong>：可以是集合（如List、Set）、数组、输入/输出通道或是生成器函数等。</li><li><strong>中间操作</strong>：不会执行任何处理，而是在流的生命周期中构建一个执行计划，如filter、map、sorted等，它们是延迟执行的。</li><li><strong>终端操作</strong>：触发实际计算，执行中间操作链，并产生结果或副作用，如forEach、collect、reduce、anyMatch等，执行后流无法再被使用。</li></ul><div class="tip custom-block"><p class="custom-block-title">Stream API</p><p><img src="'+l+'" alt="stream"></p></div><h3 id="创建stream" tabindex="-1">创建Stream <a class="header-anchor" href="#创建stream" aria-label="Permalink to &quot;创建Stream&quot;">​</a></h3><ul><li>从集合创建： <ul><li><code>Collection.stream()</code> <strong>顺序流</strong></li><li><code>Collection.parallelStream()</code><strong>并行流</strong></li></ul></li><li>数组创建：<code>Arrays.stream(array)</code></li><li>静态工厂方法： <ul><li><code>IntStream.of(int... values)</code></li><li><code>Stream.of(T... values)</code></li><li><code>Stream.iterate(seed, f)</code></li><li><code>Stream.generate(supplier)</code></li></ul></li></ul><h3 id="中间操作" tabindex="-1">中间操作 <a class="header-anchor" href="#中间操作" aria-label="Permalink to &quot;中间操作&quot;">​</a></h3><ul><li><strong>filter(Predicate)</strong>：根据条件过滤元素。</li><li><strong>map(Function)</strong>：对每个元素应用函数，转换元素类型。</li><li><strong>flatMap(Function)</strong>：与map相似，但应用于一对多映射，扁平化结果。</li><li><strong>distinct()</strong>：去除重复元素。</li><li><strong>sorted(Comparator)</strong>：排序，自然排序或自定义比较器排序。</li><li><strong>peek(Consumer)</strong>：对每个元素应用操作并传递下去，主要用于调试。</li><li><strong>limit(long)</strong>：限制流中的元素数量。</li><li><strong>skip(long)</strong>：跳过流中的前n个元素。</li></ul><h3 id="终端操作" tabindex="-1">终端操作 <a class="header-anchor" href="#终端操作" aria-label="Permalink to &quot;终端操作&quot;">​</a></h3><ul><li><strong>forEach(Consumer)</strong>：对每个元素执行操作。</li><li><strong>toArray()</strong>：将流转换为数组。</li><li><strong>reduce(T, BinaryOperator)</strong>：通过二元操作累积流的元素，如求和、求积等。</li><li><strong>collect(Collector)</strong>：归约操作，如收集到List、Set、Map等。</li><li><strong>min(Comparator)</strong>：找到最小值。</li><li><strong>max(Comparator)</strong>：找到最大值。</li><li><strong>count()</strong>：统计流中元素的数量。</li><li><strong>anyMatch(Predicate)</strong>、<strong>allMatch(Predicate)</strong>、<strong>noneMatch(Predicate)</strong>：检查是否满足条件。</li><li><strong>findFirst()</strong>、<strong>findAny()</strong>：找到第一个或任意一个元素。</li></ul><h3 id="并行处理" tabindex="-1">并行处理 <a class="header-anchor" href="#并行处理" aria-label="Permalink to &quot;并行处理&quot;">​</a></h3><ul><li>Stream API 支持并行处理，通过<code>parallelStream()</code>方法或中间操作<code>.parallel()</code>开启，可以自动利用多核CPU，提升性能。</li></ul><h3 id="短路操作" tabindex="-1">短路操作 <a class="header-anchor" href="#短路操作" aria-label="Permalink to &quot;短路操作&quot;">​</a></h3><ul><li>一些终端操作如<code>findFirst()</code>、<code>anyMatch()</code>等，一旦找到满足条件的元素就会立即停止处理，称为短路操作。</li></ul><h3 id="函数式接口与lambda表达式" tabindex="-1">函数式接口与Lambda表达式 <a class="header-anchor" href="#函数式接口与lambda表达式" aria-label="Permalink to &quot;函数式接口与Lambda表达式&quot;">​</a></h3><ul><li>Stream API 使用函数式接口（如Predicate、Function、Consumer等）和Lambda表达式来定义操作逻辑，使得代码更简洁。</li></ul><h3 id="状态与无状态操作" tabindex="-1">状态与无状态操作 <a class="header-anchor" href="#状态与无状态操作" aria-label="Permalink to &quot;状态与无状态操作&quot;">​</a></h3><ul><li>无状态操作：操作的结果仅依赖于当前元素，如map。</li><li>状态操作：操作可能依赖于之前处理过的元素，如sorted。</li></ul><h3 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h3><ul><li>Stream API 在处理过程中遇到错误会抛出异常，如NullPointerException。可以通过try-with-resources或自定义Collector等方式处理异常。</li></ul><h3 id="性能考量" tabindex="-1">性能考量 <a class="header-anchor" href="#性能考量" aria-label="Permalink to &quot;性能考量&quot;">​</a></h3><ul><li>虽然Stream API 提供了简洁的编程模型，但不当使用可能影响性能，如过度的中间操作、不必要的并行处理等。</li></ul>',23),s=[i];function n(c,d,m,u,h,g){return e(),t("div",null,s)}const S=a(o,[["render",n]]);export{P as __pageData,S as default};
