import{_ as o,c as r,o as t,a4 as s}from"./chunks/framework.Dcf-1z4i.js";const D=JSON.parse('{"title":"5_Docker 常见命令","description":"","frontmatter":{"icon":"docker"},"headers":[],"relativePath":"docs/linux/docker/Docker常见命令.md","filePath":"docs/linux/docker/Docker常见命令.md","lastUpdated":1718814077000}'),i={name:"docs/linux/docker/Docker常见命令.md"},l=s('<h1 id="_5-docker-常见命令" tabindex="-1">5_Docker 常见命令 <a class="header-anchor" href="#_5-docker-常见命令" aria-label="Permalink to &quot;5_Docker 常见命令&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">docker</p><p>这个页面是 Docker 命令的详细说明，是通过<code>docker version</code>命令获取翻译的。</p></div><h2 id="docker-命令及说明" tabindex="-1">Docker 命令及说明 <a class="header-anchor" href="#docker-命令及说明" aria-label="Permalink to &quot;Docker 命令及说明&quot;">​</a></h2><h3 id="管理命令" tabindex="-1">管理命令 <a class="header-anchor" href="#管理命令" aria-label="Permalink to &quot;管理命令&quot;">​</a></h3><ul><li><strong>builder</strong>：管理构建任务</li><li><strong>buildx</strong>：Docker Buildx（多平台构建工具）</li><li><strong>compose</strong>：管理 Docker Compose 应用，定义和运行多容器 Docker 应用</li><li><strong>config</strong>：管理 Docker 配置</li><li><strong>container</strong>：管理 Docker 容器</li><li><strong>context</strong>：管理 Docker 上下文，允许在多个 Docker 环境之间切换</li><li><strong>image</strong>：管理 Docker 镜像</li><li><strong>manifest</strong>：管理 Docker 镜像清单和清单列表</li><li><strong>network</strong>：管理 Docker 网络</li><li><strong>node</strong>：管理 Swarm 节点（Swarm 是 Docker 的原生集群管理工具）</li><li><strong>plugin</strong>：管理 Docker 插件</li><li><strong>secret</strong>：管理 Swarm 机密，主要用于在 Swarm 服务中存储和分发敏感数据</li><li><strong>service</strong>：管理 Swarm 服务</li><li><strong>stack</strong>：管理 Docker 堆栈，堆栈是一个由多个服务组成的集合，可以通过 Compose 文件定义</li><li><strong>swarm</strong>：管理 Docker Swarm 集群</li><li><strong>system</strong>：管理 Docker 系统信息</li><li><strong>trust</strong>：管理镜像的内容信任</li><li><strong>volume</strong>：管理 Docker 卷</li></ul><h3 id="swarm-命令" tabindex="-1">Swarm 命令 <a class="header-anchor" href="#swarm-命令" aria-label="Permalink to &quot;Swarm 命令&quot;">​</a></h3><ul><li><strong>swarm</strong>：管理 Docker Swarm 集群，包括初始化、加入和更新集群配置</li></ul><h3 id="常规命令" tabindex="-1">常规命令 <a class="header-anchor" href="#常规命令" aria-label="Permalink to &quot;常规命令&quot;">​</a></h3><ul><li><strong>attach</strong>：附加本地标准输入、输出和错误流到一个运行中的容器</li><li><strong>commit</strong>：从容器的更改创建一个新的镜像</li><li><strong>cp</strong>：在容器和本地文件系统之间复制文件或文件夹</li><li><strong>create</strong>：创建一个新的容器但不启动它</li><li><strong>diff</strong>：检查容器文件系统上的更改</li><li><strong>events</strong>：从 Docker 守护进程获取实时事件</li><li><strong>export</strong>：将容器的文件系统导出为一个 tar 归档文件</li><li><strong>history</strong>：显示镜像的历史记录，包括每一层的创建历史</li><li><strong>images</strong>：列出本地所有 Docker 镜像</li><li><strong>import</strong>：从 tarball 文件创建一个新的文件系统镜像</li><li><strong>info</strong>：显示 Docker 系统的详细信息</li><li><strong>inspect</strong>：返回一个或多个 Docker 对象的低级信息（如容器、镜像、卷等）</li><li><strong>kill</strong>：通过发送 SIGKILL 信号来终止一个或多个运行中的容器</li><li><strong>load</strong>：从 tar 存档加载一个镜像</li><li><strong>login</strong>：登录到 Docker 注册表</li><li><strong>logout</strong>：登出 Docker 注册表</li><li><strong>logs</strong>：获取容器的日志输出</li><li><strong>pause</strong>：暂停一个或多个容器中的所有进程</li><li><strong>port</strong>：列出一个容器的端口映射</li><li><strong>ps</strong>：列出所有容器</li><li><strong>pull</strong>：从 Docker 注册表拉取镜像</li><li><strong>push</strong>：将镜像推送到 Docker 注册表</li><li><strong>rename</strong>：重命名一个容器</li><li><strong>restart</strong>：重启一个或多个容器</li><li><strong>rm</strong>：删除一个或多个容器</li><li><strong>rmi</strong>：删除一个或多个镜像</li><li><strong>run</strong>：在新容器中运行一个命令</li><li><strong>save</strong>：将镜像保存为一个 tar 归档文件</li><li><strong>search</strong>：在 Docker Hub 中搜索镜像</li><li><strong>start</strong>：启动一个或多个已停止的容器</li><li><strong>stats</strong>：显示容器的实时资源使用统计信息</li><li><strong>stop</strong>：停止一个或多个运行中的容器</li><li><strong>tag</strong>：为镜像添加标签</li><li><strong>top</strong>：显示一个容器中运行的进程</li><li><strong>unpause</strong>：取消暂停一个或多个容器中的所有进程</li><li><strong>update</strong>：更新一个或多个容器的配置</li><li><strong>version</strong>：显示 Docker 的版本信息</li><li><strong>wait</strong>：阻塞直到一个容器停止，然后打印其退出代码</li></ul><h3 id="全局选项" tabindex="-1">全局选项 <a class="header-anchor" href="#全局选项" aria-label="Permalink to &quot;全局选项&quot;">​</a></h3><ul><li><strong>--config string</strong>：指定客户端配置文件的路径（默认是 “/root/.docker”）</li><li><strong>--context string</strong>：指定用于连接到 Docker 守护进程的上下文名称，覆盖 <code>DOCKER_HOST</code> 环境变量并且与 <code>docker context use</code> 设置的默认上下文一致</li><li><strong>-D, --debug</strong>：启用调试模式，以便输出更多调试信息</li><li><strong>--help</strong>：显示命令的帮助信息</li><li><strong>-H, --host list</strong>：指定 Docker 守护进程连接的 Socket（例如 <code>unix:///var/run/docker.sock</code> 或 <code>tcp://host:port</code>）</li><li><strong>-l, --log-level string</strong>：设置日志级别（<code>debug</code>、<code>info</code>、<code>warn</code>、<code>error</code>、<code>fatal</code>），默认是 <code>info</code></li><li><strong>--tls</strong>：启用 TLS 加密; 同时启用 <code>--tlsverify</code></li><li><strong>--tlscacert string</strong>：指定可信任的 CA 证书的路径（默认是 “/root/.docker/ca.pem”）</li><li><strong>--tlscert string</strong>：指定客户端证书文件的路径（默认是 “/root/.docker/cert.pem”）</li><li><strong>--tlskey string</strong>：指定客户端密钥文件的路径（默认是 “/root/.docker/key.pem”）</li><li><strong>--tlsverify</strong>：使用 TLS 并验证远程服务器</li><li><strong>-v, --version</strong>：显示 Docker 的版本信息并退出</li></ul><p>运行 <code>docker COMMAND --help</code> 以获得有关命令的更多详细信息。</p>',12),n=[l];function e(g,c,a,d,k,u){return t(),r("div",null,n)}const h=o(i,[["render",e]]);export{D as __pageData,h as default};
