import{_ as e,c as o,o as c,a3 as d}from"./chunks/framework.S_t1wJ0Y.js";const h=JSON.parse('{"title":"5_Docker 常见命令","description":"","frontmatter":{"icon":"docker"},"headers":[],"relativePath":"docs/linux/docker/Docker常见命令.md","filePath":"docs/linux/docker/Docker常见命令.md","lastUpdated":1714888091000}'),p={name:"docs/linux/docker/Docker常见命令.md"},r=d('<h1 id="_5-docker-常见命令" tabindex="-1">5_Docker 常见命令 <a class="header-anchor" href="#_5-docker-常见命令" aria-label="Permalink to &quot;5_Docker 常见命令&quot;">​</a></h1><p><code>attach</code> # 当前 shell 下 attach 连接指定运行镜像</p><p><code>build </code> # 通过 Dockerfile 定制镜像</p><p><code>commit </code> # 提交当前容器为新的镜像</p><p><code>cp </code> #从容器中拷贝指定文件或者目录到宿主机中</p><p><code>create</code> # 创建一个新的容器，同 run，但不启动容器</p><p><code>diff</code> # 查看 docker 容器变化</p><p><code>events </code> # 从 docker 服务获取容器实时事件</p><p><code>exec</code> # 在已存在的容器上运行命令</p><p><code>export</code> # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</p><p><code>history </code> # 展示一个镜像形成历史</p><p><code>images </code> # 列出系统当前镜像</p><p><code>import</code> # 从tar包中的内容创建一个新的文件系统映像[对应export]</p><p><code>info </code> # 显示系统相关信息</p><p><code>inspect</code> # 查看容器详细信息</p><p><code>kill </code> # kill 指定 docker 容器</p><p><code>load</code> # 从一个 tar 包中加载一个镜像[对应 save]</p><p><code>login</code> # 注册或者登陆一个 docker 源服务器</p><p><code>logout </code> # 从当前 Docker registry 退出</p><p><code>logs</code> # 输出当前容器日志信息</p><p><code>port</code> # 查看映射端口对应的容器内部源端口</p><p><code>pause </code> # 暂停容器</p><p><code>ps </code> # 列出容器列表</p><p><code>pull </code> # 从docker镜像源服务器拉取指定镜像或者库镜像</p><p><code>push </code> # 推送指定镜像或者库镜像至docker源服务器</p><p><code>restart</code> # 重启运行的容器</p><p><code>rm </code> # 移除一个或者多个容器</p><p><code>rmi</code> # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</p><p><code>run </code> # 创建一个新的容器并运行一个命令</p><p><code>save </code> # 保存一个镜像为一个 tar 包[对应 load]</p><p><code>search </code> # 在 docker hub 中搜索镜像</p><p><code>start</code> # 启动容器</p><p><code>stop</code> # 停止容器</p><p><code>tag </code> # 给源中镜像打标签</p><p><code>top </code> # 查看容器中运行的进程信息</p><p><code>unpause</code> # 取消暂停容器</p><p><code>version</code> # 查看 docker 版本号</p><p><code>wait</code> # 截取容器停止时的退出状态值</p>',38),t=[r];function a(s,i,_,n,l,k){return c(),o("div",null,t)}const m=e(p,[["render",a]]);export{h as __pageData,m as default};
