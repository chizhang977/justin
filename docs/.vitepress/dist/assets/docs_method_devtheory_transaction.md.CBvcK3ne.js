import{_ as a,c as t,o as e,a3 as o}from"./chunks/framework.Di-rThNJ.js";const u=JSON.parse('{"title":"事务的ACID","description":"","frontmatter":{},"headers":[],"relativePath":"docs/method/devtheory/transaction.md","filePath":"docs/method/devtheory/transaction.md","lastUpdated":1715072167000}'),i={name:"docs/method/devtheory/transaction.md"},r=o('<h1 id="事务的acid" tabindex="-1">事务的ACID <a class="header-anchor" href="#事务的acid" aria-label="Permalink to &quot;事务的ACID&quot;">​</a></h1><p>ACID是数据库事务处理的四个基本属性，用于确保即使在异常情况下数据的准确性和完整性。</p><h2 id="原子性-atomicity" tabindex="-1">原子性（Atomicity） <a class="header-anchor" href="#原子性-atomicity" aria-label="Permalink to &quot;原子性（Atomicity）&quot;">​</a></h2><p>事务被视为一个不可分割的最小工作单元，事务中的所有操作要么全部执行成功，要么全部不执行，不会部分成功部分失败。</p><h2 id="一致性-consistency" tabindex="-1">一致性（Consistency） <a class="header-anchor" href="#一致性-consistency" aria-label="Permalink to &quot;一致性（Consistency）&quot;">​</a></h2><p>事务执行前后，数据库从一个一致状态转换到另一个一致状态。这意味着事务必须遵循所有的数据完整性规则，如外键约束、唯一性约束等，以保持数据库的正确状态。</p><h2 id="隔离性-isolation" tabindex="-1">隔离性（Isolation） <a class="header-anchor" href="#隔离性-isolation" aria-label="Permalink to &quot;隔离性（Isolation）&quot;">​</a></h2><p>多个事务并发执行时，每个事务好像在独立地处理数据，不受其他事务的影响。这是通过不同的隔离级别来实现的，不同的隔离级别会平衡并发性和数据一致性之间的关系。</p><h2 id="持久性-durability" tabindex="-1">持久性（Durability） <a class="header-anchor" href="#持久性-durability" aria-label="Permalink to &quot;持久性（Durability）&quot;">​</a></h2><p>一旦事务提交，其效果就是永久性的，即使系统发生故障，事务的结果也不会丢失。这通常通过将事务日志写入非易失性存储器来保证。</p>',10),n=[r];function s(c,d,l,h,_,p){return e(),t("div",null,n)}const y=a(i,[["render",s]]);export{u as __pageData,y as default};
