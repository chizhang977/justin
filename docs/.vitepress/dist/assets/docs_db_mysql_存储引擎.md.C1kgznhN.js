import{_ as a,c as e,o as t,a4 as o}from"./chunks/framework.Dcf-1z4i.js";const b=JSON.parse('{"title":"MySQL 存储引擎","description":"","frontmatter":{"icon":"mysql","title":"MySQL 存储引擎"},"headers":[],"relativePath":"docs/db/mysql/存储引擎.md","filePath":"docs/db/mysql/存储引擎.md","lastUpdated":1714888091000}'),l={name:"docs/db/mysql/存储引擎.md"},i=o('<h1 id="mysql-存储引擎" tabindex="-1">MySQL 存储引擎 <a class="header-anchor" href="#mysql-存储引擎" aria-label="Permalink to &quot;MySQL 存储引擎&quot;">​</a></h1><h3 id="innodb" tabindex="-1">Innodb： <a class="header-anchor" href="#innodb" aria-label="Permalink to &quot;Innodb：&quot;">​</a></h3><ol><li>MySQL默认的存储引擎，支持事物，支持行级锁，适用于多用户高并发写操作</li><li>内置了行级锁和外键约束，适用于复杂的事务处理和高度一致性的场景。</li><li>使用B+树数据结构组织数据，同时支持主键索引</li></ol><h3 id="myisam" tabindex="-1">MyISAM <a class="header-anchor" href="#myisam" aria-label="Permalink to &quot;MyISAM&quot;">​</a></h3><ol><li>不支持事物，和行级锁，仅支持表级锁，在读取密集型应用或不需要事物处理的场景表现较好</li><li>提供了全文索引，并发写不如Innodb</li><li>不支持奔溃恢复，可能会造成数据的丢失</li></ol>',5),s=[i];function n(d,r,_,c,m,h){return t(),e("div",null,s)}const p=a(l,[["render",n]]);export{b as __pageData,p as default};
