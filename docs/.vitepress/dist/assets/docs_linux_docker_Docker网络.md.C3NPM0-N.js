import{_ as s,c as i,o as a,a3 as e,ct as t,cu as n}from"./chunks/framework.S_t1wJ0Y.js";const _=JSON.parse('{"title":"9_0_Docker 网络","description":"","frontmatter":{"icon":"docker"},"headers":[],"relativePath":"docs/linux/docker/Docker网络.md","filePath":"docs/linux/docker/Docker网络.md","lastUpdated":1714888091000}'),l={name:"docs/linux/docker/Docker网络.md"},r=e(`<h1 id="_9-0-docker-网络" tabindex="-1">9_0_Docker 网络 <a class="header-anchor" href="#_9-0-docker-网络" aria-label="Permalink to &quot;9_0_Docker 网络&quot;">​</a></h1><h3 id="理解" tabindex="-1">理解 <a class="header-anchor" href="#理解" aria-label="Permalink to &quot;理解&quot;">​</a></h3><p>docker启动后，会产生一个<code>docker0</code>的虚拟网桥，容器之间以及容器与主机系统之间通信的关键部分</p><p>容器ip变动时候可以通过服务名直接网络通信而不受影响</p><h3 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #帮助信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #查看网络</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx网络名字</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #查看网络源数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> netwrok</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx网络名字</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 删除网络</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect/create/disconnect/inspect/ls/prune/rm</span></span></code></pre></div><h3 id="网络模式" tabindex="-1">网络模式 <a class="header-anchor" href="#网络模式" aria-label="Permalink to &quot;网络模式&quot;">​</a></h3><ul><li><p><strong>Bridge网络（默认）</strong></p><ul><li><p>Docker在安装时创建一个名为<code>bridge</code>的默认网络。在这个网络模式下，<em><strong><u>Docker会为每个新创建的容器分配一个唯一的IP地址，并通过虚拟网桥连接容器和主机</u></strong></em>。容器间可以直接通过IP地址通信，也可以通过容器名称相互通信。</p></li><li><p>查看bridge网络详细信息</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ifconfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><p><img src="`+t+'" alt="bridge"></p></li></ul></li><li><p><strong>Host网络模式</strong></p><ul><li>当容器使用<code>--net=host</code>启动时，它将共享宿主机的网络栈，这意味着容器将不会获得独立的Network Namespace，而是直接***<u>使用宿主机的网络接口，拥有宿主机的IP地址和端口</u>***。</li></ul></li><li><p><strong>None网络模式</strong></p><ul><li>在<code>--net=none</code>模式下，<em><strong><u>容器没有任何网络功能，不能联网</u></strong></em>，通常用于运行那些不需要网络通信的应用程序。</li></ul></li><li><p><strong>Container网络模式</strong></p><ul><li>当使用<code>--net=container:&lt;容器ID或名字&gt;</code>启动容器时，<em><strong><u>新容器将与指定容器共享相同的Network Namespace</u></strong></em>，意味着它们将共享同一个网络堆栈，包括IP地址和端口。</li><li><img src="'+n+'" alt="Container"></li></ul></li><li><p><strong>自定义网络（User-defined networks）</strong></p><ul><li>用户可以创建自己的网络，例如通过<code>docker network create</code>命令创建overlay网络、macvlan网络、host网络等多种类型，以便更灵活地控制容器间的网络通信和隔离。</li></ul></li></ul><p>自定义网络的优点包括：</p><ul><li>可以实现多主机通信（在overlay网络中）。</li><li>更细粒度的网络策略控制，如子网划分、网络隔离、端口映射等。</li><li>DNS服务，容器加入网络后可以自动为其分配域名，容器间可通过容器名称进行通信。</li></ul><p>在Docker守护程序的配置文件<code>/etc/docker/daemon.json</code>中，可以对Docker网络进行全局的配置调整，例如默认的网络驱动、DNS服务器等。配置变更后需重启Docker服务才能生效。</p>',11),k=[r];function o(p,h,d,c,g,F){return a(),i("div",null,k)}const y=s(l,[["render",o]]);export{_ as __pageData,y as default};
