import{_ as a,c as e,o as i,a4 as s}from"./chunks/framework.Dcf-1z4i.js";const u=JSON.parse('{"title":"Java10新特性","description":"","frontmatter":{},"headers":[],"relativePath":"docs/java/newfeatures/java10/README.md","filePath":"docs/java/newfeatures/java10/README.md","lastUpdated":1716722500000}'),l={name:"docs/java/newfeatures/java10/README.md"},t=s(`<h1 id="java10新特性" tabindex="-1">Java10新特性 <a class="header-anchor" href="#java10新特性" aria-label="Permalink to &quot;Java10新特性&quot;">​</a></h1><p><a href="https://openjdk.java.net/projects/jdk/10/" target="_blank" rel="noreferrer">OpenJDK-Java10-新特性</a></p><div class="warning custom-block"><p class="custom-block-title">Java10 新特性</p><ul><li><p>286: <a href="http://openjdk.java.net/jeps/286" target="_blank" rel="noreferrer">Local-Variable Type Inference</a> 局部变量类型推断</p></li><li><p>296: <a href="http://openjdk.java.net/jeps/296" target="_blank" rel="noreferrer">Consolidate the JDK Forest into a Single Repository</a> JDK库的合并</p></li><li><p>304: <a href="http://openjdk.java.net/jeps/304" target="_blank" rel="noreferrer">Garbage-Collector Interface</a> 统一的垃圾回收接口</p></li><li><p>307: <a href="http://openjdk.java.net/jeps/307" target="_blank" rel="noreferrer">Parallel Full GC for G1</a> 为G1提供并行的Full GC</p></li><li><p>310: <a href="http://openjdk.java.net/jeps/310" target="_blank" rel="noreferrer">Application Class-Data Sharing</a> 应用程序类数据（AppCDS）共享</p></li><li><p>312: <a href="http://openjdk.java.net/jeps/312" target="_blank" rel="noreferrer">Thread-Local Handshakes</a> ThreadLocal握手交互</p></li><li><p>313: <a href="http://openjdk.java.net/jeps/313" target="_blank" rel="noreferrer">Remove the Native-Header Generation Tool (javah)</a> 移除JDK中附带的javah工具</p></li><li><p>314: <a href="http://openjdk.java.net/jeps/314" target="_blank" rel="noreferrer">Additional Unicode Language-Tag Extensions</a> 使用附加的Unicode语言标记扩展</p></li><li><p>316: <a href="http://openjdk.java.net/jeps/316" target="_blank" rel="noreferrer">Heap Allocation on Alternative Memory Devices</a> 能将堆内存占用分配给用户指定的备用内存设备</p></li><li><p>317: <a href="http://openjdk.java.net/jeps/317" target="_blank" rel="noreferrer">Experimental Java-Based JIT Compiler</a> 使用Graal基于Java的编译器</p></li><li><p>319: <a href="http://openjdk.java.net/jeps/319" target="_blank" rel="noreferrer">Root Certificates</a> 根证书</p></li><li><p>322: <a href="http://openjdk.java.net/jeps/322" target="_blank" rel="noreferrer">Time-Based Release Versioning</a> 基于时间定于的发布版本</p></li></ul></div><h2 id="_1、局部变量类型推断" tabindex="-1">1、局部变量类型推断 <a class="header-anchor" href="#_1、局部变量类型推断" aria-label="Permalink to &quot;1、局部变量类型推断&quot;">​</a></h2><p>Java 10 引入了局部变量类型推断特性，通过使用 <code>var</code> 关键字，可以在声明局部变量时省略显式的类型声明。编译器会根据右侧的表达式推断变量的类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Scala&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推断为 List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推断为 Stream&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// item 推断为 String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h4><ul><li><code>var</code> 只能用于局部变量声明，不能用于成员变量、方法参数和返回类型。</li><li><code>var</code> 不能用于没有初始化的变量声明。</li><li>使用 <code>var</code> 要确保代码的可读性，避免滥用导致代码难以理解。</li></ul><h2 id="_2、垃圾收集器接口-garbage-collector-interface" tabindex="-1">2、垃圾收集器接口（Garbage-Collector Interface） <a class="header-anchor" href="#_2、垃圾收集器接口-garbage-collector-interface" aria-label="Permalink to &quot;2、垃圾收集器接口（Garbage-Collector Interface）&quot;">​</a></h2><p>Java 10 引入了一个新的垃圾收集器接口，允许更容易地添加、删除或替换垃圾收集器。这使得垃圾收集器的开发和实验变得更加灵活。</p><h4 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><ul><li>引入新的 <code>-XX:+UseConcMarkSweepGC</code> 和 <code>-XX:+UseG1GC</code> 标志，用于启用不同的垃圾收集器。</li><li>使用新的接口可以更轻松地集成定制的垃圾收集器。</li></ul><h2 id="_3、并行垃圾回收改进-parallel-full-gc-for-g1" tabindex="-1">3、并行垃圾回收改进（Parallel Full GC for G1） <a class="header-anchor" href="#_3、并行垃圾回收改进-parallel-full-gc-for-g1" aria-label="Permalink to &quot;3、并行垃圾回收改进（Parallel Full GC for G1）&quot;">​</a></h2><p>G1 垃圾收集器在 Java 10 中进行了改进，现在可以在并行模式下执行完全垃圾回收（Full GC），以提高性能。</p><h4 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><ul><li>在启用 G1 垃圾收集器时，使用 <code>-XX:+UseG1GC</code> 选项，完全垃圾回收将自动并行执行。</li></ul><h2 id="_4、合并-jdk-和-jre-镜像-consolidate-the-jdk-and-jre-images" tabindex="-1">4、合并 JDK 和 JRE 镜像（Consolidate the JDK and JRE Images） <a class="header-anchor" href="#_4、合并-jdk-和-jre-镜像-consolidate-the-jdk-and-jre-images" aria-label="Permalink to &quot;4、合并 JDK 和 JRE 镜像（Consolidate the JDK and JRE Images）&quot;">​</a></h2><p>Java 10 合并了 JDK 和 JRE 镜像，现在只有一个统一的 JDK 镜像。这简化了 JDK 和 JRE 的管理，减少了冗余。</p><h4 id="示例-2" tabindex="-1">示例： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><ul><li>安装和使用 Java 10 时，不再区分 JDK 和 JRE，只有一个统一的 JDK 镜像。</li></ul><h2 id="_5、应用类数据共享-application-class-data-sharing" tabindex="-1">5、应用类数据共享（Application Class-Data Sharing） <a class="header-anchor" href="#_5、应用类数据共享-application-class-data-sharing" aria-label="Permalink to &quot;5、应用类数据共享（Application Class-Data Sharing）&quot;">​</a></h2><p>Java 10 扩展了类数据共享（Class-Data Sharing, CDS）特性，现在可以将应用程序的类数据预加载到共享存储区中，以提高启动时间和内存使用效率。</p><h4 id="示例-3" tabindex="-1">示例： <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建类数据共享档案</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xshare:dump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:SharedArchiveFile=app-cds.jsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MainClass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用类数据共享档案启动应用程序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xshare:on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:SharedArchiveFile=app-cds.jsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MainClass</span></span></code></pre></div><h2 id="_6、备用内存设备的实验性支持-experimental-java-based-jit-compiler" tabindex="-1">6、备用内存设备的实验性支持（Experimental Java-Based JIT Compiler） <a class="header-anchor" href="#_6、备用内存设备的实验性支持-experimental-java-based-jit-compiler" aria-label="Permalink to &quot;6、备用内存设备的实验性支持（Experimental Java-Based JIT Compiler）&quot;">​</a></h2><p>Java 10 引入了 Graal 作为实验性的基于 Java 的 JIT 编译器。Graal 提供了高性能的动态编译和优化功能。</p><h4 id="示例-4" tabindex="-1">示例： <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 Graal 编译器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UnlockExperimentalVMOptions</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseJVMCICompiler</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+EnableJVMCI</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseGraal</span></span></code></pre></div><h2 id="_7、根证书-root-certificates" tabindex="-1">7、根证书（Root Certificates） <a class="header-anchor" href="#_7、根证书-root-certificates" aria-label="Permalink to &quot;7、根证书（Root Certificates）&quot;">​</a></h2><p>Java 10 包含了默认的根证书集合，简化了开发和部署需要安全连接的应用程序。</p><h4 id="示例-5" tabindex="-1">示例： <a class="header-anchor" href="#示例-5" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><ul><li>安装和使用 Java 10 时，根证书已经内置，不需要额外配置。</li></ul><h2 id="_8、线程本地握手-thread-local-handshakes" tabindex="-1">8、线程本地握手（Thread-Local Handshakes） <a class="header-anchor" href="#_8、线程本地握手-thread-local-handshakes" aria-label="Permalink to &quot;8、线程本地握手（Thread-Local Handshakes）&quot;">​</a></h2><p>Java 10 引入了线程本地握手机制，允许 JVM 暂停单个线程而不是所有线程，以执行特定操作。这提高了调试和诊断的灵活性和性能。</p><h4 id="示例-6" tabindex="-1">示例： <a class="header-anchor" href="#示例-6" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><ul><li>使用 JDK 内部 API，可以实现线程本地握手，但这是高级功能，通常用于 JVM 开发和优化。</li></ul><h2 id="其他改进" tabindex="-1">其他改进 <a class="header-anchor" href="#其他改进" aria-label="Permalink to &quot;其他改进&quot;">​</a></h2><ul><li><strong>区域垃圾收集器改进（ZGC）</strong>：优化了垃圾收集器的性能，尤其是针对大型内存的低延迟垃圾收集。</li><li><strong>堆分段分配器（Heap Allocation on Alternative Memory Devices）</strong>：允许 JVM 使用备用内存设备，例如非易失性内存（NVM），以提高性能和稳定性。</li></ul>`,38),r=[t];function n(h,p,o,k,d,c){return i(),e("div",null,r)}const E=a(l,[["render",n]]);export{u as __pageData,E as default};
