import{_ as i,c as l,o as e,a4 as a}from"./chunks/framework.Dcf-1z4i.js";const b=JSON.parse('{"title":"3_Redis 缓存详解","description":"","frontmatter":{"icon":"Redis","title":"3_Redis 缓存详解"},"headers":[],"relativePath":"docs/db/redis/3_缓存详解.md","filePath":"docs/db/redis/3_缓存详解.md","lastUpdated":1714888091000}'),r={name:"docs/db/redis/3_缓存详解.md"},t=a('<h1 id="redis-缓存详解" tabindex="-1">Redis 缓存详解 <a class="header-anchor" href="#redis-缓存详解" aria-label="Permalink to &quot;Redis 缓存详解&quot;">​</a></h1><h3 id="_1、缓存" tabindex="-1">1、缓存 <a class="header-anchor" href="#_1、缓存" aria-label="Permalink to &quot;1、缓存&quot;">​</a></h3><h4 id="_1、1-缓存介绍" tabindex="-1">1、1 缓存介绍 <a class="header-anchor" href="#_1、1-缓存介绍" aria-label="Permalink to &quot;1、1 缓存介绍&quot;">​</a></h4><p><strong>缓存(<strong>Cache),就是数据交换的</strong>缓冲区</strong>,俗称的缓存就是<strong>缓冲区内的数据</strong>。</p><h4 id="_1、2-缓存优劣" tabindex="-1">1、2 缓存优劣 <a class="header-anchor" href="#_1、2-缓存优劣" aria-label="Permalink to &quot;1、2 缓存优劣&quot;">​</a></h4><ul><li>优势： <ul><li>降低后端的负载</li><li>提高读写效率，降低响应时间</li></ul></li><li>劣势 <ul><li>数据一致性成本</li><li>代码维护成本</li><li>运维成本</li></ul></li></ul><h4 id="_1、3-如何使用" tabindex="-1">1、3 如何使用 <a class="header-anchor" href="#_1、3-如何使用" aria-label="Permalink to &quot;1、3 如何使用&quot;">​</a></h4><ul><li><p>浏览器缓存</p></li><li><p>应用层缓存</p></li><li><p>数据库缓存</p></li><li><p>CPU缓存</p></li></ul><h3 id="_1、4-缓存更新策略" tabindex="-1">1、4 缓存更新策略 <a class="header-anchor" href="#_1、4-缓存更新策略" aria-label="Permalink to &quot;1、4 缓存更新策略&quot;">​</a></h3><p>有更新的策略主要是为了节约Redis的内存空间，避免因为缓存数据过多</p><p>**内存淘汰：**redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p><p>**超时剔除：**当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p><p>**主动更新：**我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题（更新数据库的时候，跟新缓存/删除缓存）</p><h4 id="_1、5-缓存不一致" tabindex="-1">1、5 缓存不一致 <a class="header-anchor" href="#_1、5-缓存不一致" aria-label="Permalink to &quot;1、5 缓存不一致&quot;">​</a></h4><p>由于我们的<strong>缓存的数据源来自于数据库</strong>,而数据库的<strong>数据是会发生变化的</strong>,因此,如果当数据库中<strong>数据发生变化,而缓存却没有同步</strong>,此时就会有<strong>一致性问题存在</strong>,其后果是:</p><p>用户使用缓存中的过时数据,就会产生类似多线程数据安全问题,从而影响业务,产品口碑等;怎么解决呢？有如下几种方案</p><p>Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案（推荐）</p><p>Read/Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理</p><p>Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</p><h3 id="_2、缓存穿透" tabindex="-1">2、缓存穿透 <a class="header-anchor" href="#_2、缓存穿透" aria-label="Permalink to &quot;2、缓存穿透&quot;">​</a></h3><p>缓存穿透：客户端请求的苏剧在缓存中和数据库都都不存在，这样缓存永远不会生效，这些请求都将达到数据库。</p><p>解决方案：</p><ul><li>缓存空对象 <ul><li>优势：简单，易维护</li><li>劣势：内存消耗，一致性问题</li></ul></li><li>布隆过滤 <ul><li>优势：内存占用少，没有多余的key</li><li>劣势：存在误判，实现复杂</li></ul></li><li>增强id的复杂度，避免被猜测id规律</li><li>增强用户权限校验</li><li>做好热点参数限流</li></ul><p>**缓存空对象思路分析：**当我们客户端访问不存在的数据时，先请求redis，但是此时redis中没有数据，此时会访问到数据库，但是数据库中也没有数据，这个数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库，简单的解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了</p><p>**布隆过滤：**布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，</p><p>假设布隆过滤器判断这个数据不存在，则直接返回这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突</p><h3 id="_3、缓存雪崩" tabindex="-1">3、缓存雪崩 <a class="header-anchor" href="#_3、缓存雪崩" aria-label="Permalink to &quot;3、缓存雪崩&quot;">​</a></h3><p>缓存雪崩是指同一段时间大量的缓存key同时失效或着Redis服务宕机，导致大量的请求达到数据库，带来巨大的压力</p><p>解决方案：</p><ul><li>缓存设置不同的过期时间</li><li>利用Redis集群提高服务的可靠性</li><li>添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h3 id="_4、缓存击穿" tabindex="-1">4、缓存击穿 <a class="header-anchor" href="#_4、缓存击穿" aria-label="Permalink to &quot;4、缓存击穿&quot;">​</a></h3><p>缓存击穿又叫缓存热点key问题，一个被高并发访问并且缓存业务重建比较复杂的key突然失效，无数请求访问会在瞬间给数据库带来巨大的冲击</p><p>解决方案：</p><ul><li>互斥锁 <ul><li>优点： <ul><li>没有内存消耗</li><li>一致性保证</li><li>实现简单，只有一把锁</li></ul></li><li>缺点： <ul><li>死锁</li><li>性能低</li></ul></li></ul></li><li>超时过期 <ul><li>优点： <ul><li>性能好</li></ul></li><li>缺点： <ul><li>实现复杂</li><li>不保证一致性</li><li>额外的内存消耗，除了数据还有过期时间字段</li></ul></li></ul></li></ul><p>解决方案一、使用锁来解决：</p><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。</p><p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p><p>**互斥锁方案：**由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p><p><strong>逻辑过期方案：</strong> 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p>',39),s=[t];function o(d,n,p,h,u,_){return e(),l("div",null,s)}const m=i(r,[["render",o]]);export{b as __pageData,m as default};
