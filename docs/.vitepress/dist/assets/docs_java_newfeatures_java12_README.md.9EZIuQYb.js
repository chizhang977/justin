import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.Dcf-1z4i.js";const c=JSON.parse('{"title":"Java12新特性","description":"","frontmatter":{},"headers":[],"relativePath":"docs/java/newfeatures/java12/README.md","filePath":"docs/java/newfeatures/java12/README.md","lastUpdated":1716722500000}'),h={name:"docs/java/newfeatures/java12/README.md"},t=n(`<h1 id="java12新特性" tabindex="-1">Java12新特性 <a class="header-anchor" href="#java12新特性" aria-label="Permalink to &quot;Java12新特性&quot;">​</a></h1><p><a href="https://openjdk.java.net/projects/jdk/12/" target="_blank" rel="noreferrer">java12新特性</a></p><div class="warning custom-block"><p class="custom-block-title">java12新特性</p><blockquote><ul><li>189：<a href="https://openjdk.java.net/jeps/189" target="_blank" rel="noreferrer">Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</a> 低暂停时间的GC</li><li>230: <a href="https://openjdk.java.net/jeps/230" target="_blank" rel="noreferrer">Microbenchmark Suite</a> 微基准测试套件</li><li>325: <a href="https://openjdk.java.net/jeps/325" target="_blank" rel="noreferrer">Switch Expressions (Preview)</a> switch表达式</li><li>334: <a href="https://openjdk.java.net/jeps/334" target="_blank" rel="noreferrer">JVM Constants API </a> JVM常量API</li><li>340: <a href="https://openjdk.java.net/jeps/340" target="_blank" rel="noreferrer">One AArch64 Port, Not Two</a> 只保留一个AArch64实现</li><li>341: <a href="https://openjdk.java.net/jeps/341" target="_blank" rel="noreferrer">Default CDS Archives</a> 默认类数据共享归档文件</li><li>344: <a href="https://openjdk.java.net/jeps/344" target="_blank" rel="noreferrer">Abortable Mixed Collections for G1</a> 可中止的G1 Mixed GC</li><li>346: <a href="https://openjdk.java.net/jeps/346" target="_blank" rel="noreferrer">Promptly Return Unused Committed Memory from G1</a> G1及时返回未使用的已分配内存</li></ul></blockquote></div><h2 id="_1、switch表达式" tabindex="-1">1、switch表达式 <a class="header-anchor" href="#_1、switch表达式" aria-label="Permalink to &quot;1、switch表达式&quot;">​</a></h2><p>Java 12引入了switch表达式的预览特性，使得switch语句可以用于表达式，从而简化了代码结构和提高了可读性。这个特性引入了一种新的语法，允许switch语句返回值，并支持lambda风格的case标签。</p><ul><li><p>Java 12将会对switch声明语句进行扩展，使用<code>case L -&gt;</code>来替代以前的<code>break;</code>，省去了 break 语句，避免了因少写 break 而出错。</p></li><li><p>同时将多个 case 合并到一行，显得简洁、清晰，也更加优雅的表达逻辑分支。</p></li><li><p>为了保持兼容性，case 条件语句中依然可以使用字符<code> :</code> ，但是同一个 switch 结构里不能混用<code> -&gt;</code> 和<code> :</code> ，否则编译错误。</p></li></ul><p>示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwitchExpressionExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String dayName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (day) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Monday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Tuesday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Wednesday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Thursday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Friday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Saturday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sunday&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid day: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dayName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2、jvm常量api" tabindex="-1">2、JVM常量API <a class="header-anchor" href="#_2、jvm常量api" aria-label="Permalink to &quot;2、JVM常量API&quot;">​</a></h2><p>引入JVM常量API，使得访问和操作类文件常量池中的常量更加容易。这个API提供了一种标准方式来描述和处理类文件中的各种常量，从而支持更多高级的字节码处理和生成工具。</p><p><strong>主要特性:</strong></p><ul><li>提供对常量池中常量的标准化访问。</li><li>使字节码生成和操作工具更加健壮和灵活。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.constant.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JVMConstantsExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MethodTypeDesc methodTypeDesc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MethodTypeDesc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(Ljava/lang/String;)V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Method Type Descriptor: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> methodTypeDesc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">descriptorString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3、默认类数据共享归档文件" tabindex="-1">3、默认类数据共享归档文件 <a class="header-anchor" href="#_3、默认类数据共享归档文件" aria-label="Permalink to &quot;3、默认类数据共享归档文件&quot;">​</a></h2><p>Class Data Sharing（CDS）技术在Java 12中得到了改进，默认情况下启用并包含了基础模块的默认CDS存档。这显著减少了Java应用程序的启动时间，并且改善了内存占用。</p><h2 id="_4、可中止的g1-mixed-gc" tabindex="-1">4、可中止的G1 Mixed GC <a class="header-anchor" href="#_4、可中止的g1-mixed-gc" aria-label="Permalink to &quot;4、可中止的G1 Mixed GC&quot;">​</a></h2><p>改进了G1垃圾收集器，允许在混合收集过程中中止垃圾收集任务。这提高了垃圾收集器的响应能力和性能，使得应用程序能够更好地应对高负载和低延迟的需求。</p><p>主要特性:</p><p>提高了G1垃圾收集器的响应能力。 允许在混合收集中中止垃圾收集任务，提高了GC的灵活性。 实际应用:</p><p>适用于对延迟敏感的应用程序，如实时系统和高频交易系统。 提高了GC性能，使应用程序在高负载下也能保持良好的响应时间。</p><h2 id="_5、-及时返回未使用的已分配内存" tabindex="-1">5、 及时返回未使用的已分配内存 <a class="header-anchor" href="#_5、-及时返回未使用的已分配内存" aria-label="Permalink to &quot;5、 及时返回未使用的已分配内存&quot;">​</a></h2><p>G1垃圾收集器现在可以及时返回未使用的已提交内存给操作系统，从而提高了内存利用率，并减少了内存浪费。</p><p><strong>主要特性:</strong></p><p>提高内存利用率，减少内存浪费。 使得未使用的内存能够及时返回给操作系统。</p><h2 id="_6、低暂停时间的gc" tabindex="-1">6、低暂停时间的GC <a class="header-anchor" href="#_6、低暂停时间的gc" aria-label="Permalink to &quot;6、低暂停时间的GC&quot;">​</a></h2><p><code>Shenandoah</code>是一种低暂停时间的垃圾收集器，设计用于减少GC暂停时间，适用于高响应性和低延迟要求的应用程序。<code>Shenandoah</code>通过并行执行标记和压缩阶段，实现了极低的暂停时间。</p><p><strong>主要特性:</strong></p><p>极低的GC暂停时间。 适用于需要高响应性和低延迟的应用程序。 <strong>配置方式：</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UnlockExperimentalVMOptions</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseShenandoahGC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xmx2g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xms2g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyApp</span></span></code></pre></div><h2 id="_7、微基准测试套件" tabindex="-1">7、微基准测试套件 <a class="header-anchor" href="#_7、微基准测试套件" aria-label="Permalink to &quot;7、微基准测试套件&quot;">​</a></h2><p>引入了一套基于OpenJDK的微基准测试套件，方便开发者对Java代码进行性能测试和优化。这套基准测试套件基于Java Microbenchmark Harness (JMH)，提供了标准化的性能测试框架。 <strong>主要特性:</strong></p><ul><li>提供标准化的性能测试工具。</li><li>基于JMH，支持细粒度的性能测试。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.openjdk.jmh.annotations.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BenchmarkMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Mode.AverageTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Warmup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Measurement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Scope.Benchmark)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyBenchmark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 测试代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_8、-只保留一个aarch64实现" tabindex="-1">8、 只保留一个AArch64实现 <a class="header-anchor" href="#_8、-只保留一个aarch64实现" aria-label="Permalink to &quot;8、 只保留一个AArch64实现&quot;">​</a></h2><p>Java 12合并了两个AArch64平台的端口，简化了JDK的构建和维护。这一更改提高了对AArch64平台的支持，并减少了维护成本。</p><p><strong>主要特性:</strong></p><p>合并了两个AArch64端口。 简化了JDK的构建和维护。</p>`,37),l=[t];function p(e,k,r,d,E,g){return a(),i("div",null,l)}const y=s(h,[["render",p]]);export{c as __pageData,y as default};
