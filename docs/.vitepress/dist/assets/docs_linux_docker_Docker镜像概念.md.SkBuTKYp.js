import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.Dcf-1z4i.js";const g=JSON.parse('{"title":"Docker镜像概念","description":"","frontmatter":{"icon":"docker"},"headers":[],"relativePath":"docs/linux/docker/Docker镜像概念.md","filePath":"docs/linux/docker/Docker镜像概念.md","lastUpdated":1718699027000}'),l={name:"docs/linux/docker/Docker镜像概念.md"},t=e(`<h1 id="docker镜像概念" tabindex="-1">Docker镜像概念 <a class="header-anchor" href="#docker镜像概念" aria-label="Permalink to &quot;Docker镜像概念&quot;">​</a></h1><h3 id="unionfs-联合文件系统" tabindex="-1">UnionFS(联合文件系统)： <a class="header-anchor" href="#unionfs-联合文件系统" aria-label="Permalink to &quot;UnionFS(联合文件系统)：&quot;">​</a></h3><p>一种分层、轻量级、高性能的文件系统，支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂在到同一个虚拟文件系统下。作为Docker镜像的基础，镜像通过分层来继承，基于基础镜像，制作各种具体的应用镜像。</p><h3 id="docker镜像加载的原理" tabindex="-1">Docker镜像加载的原理： <a class="header-anchor" href="#docker镜像加载的原理" aria-label="Permalink to &quot;Docker镜像加载的原理：&quot;">​</a></h3><ul><li>当拉取或创建一个新的Docker镜像时，实际上是从远程仓库下载各层的元数据和实际数据，或者根据Dockerfile指令逐步构建各个层。</li><li>启动容器时，Docker会依据镜像的层次结构，从最底层开始逐层挂载，并最后挂载可写层。</li></ul><h3 id="分层结构的优点" tabindex="-1">分层结构的优点 <a class="header-anchor" href="#分层结构的优点" aria-label="Permalink to &quot;分层结构的优点&quot;">​</a></h3><details class="details custom-block"><summary>资源共享</summary><ul><li>多个容器可以共享相同的镜像层，这意味着存储空间得以高效利用。比如，多个基于相同操作系统基础镜像的容器只需在磁盘上保留一份该操作系统的副本。</li></ul></details><details class="details custom-block"><summary>存储效率</summary><ul><li>当对一个已存在的镜像进行修改时，只需要添加一个新的层来记录这些更改，而不是复制整个镜像。这样极大地节省了磁盘空间，尤其是在大型应用环境中，这种差异性存储策略非常有效。</li></ul></details><details class="details custom-block"><summary>镜像构建和传输速度</summary><ul><li>分层结构使得镜像构建过程中，只有新增或更新的部分需要重新构建。在传输镜像时，如果目标环境已有部分层，则只需传输新的层即可，大大加快了镜像的分发和部署速度。</li></ul></details><details class="details custom-block"><summary>易维护与升级</summary><ul><li>镜像的每一层代表了一个独立的操作或配置步骤，这使得更新和回滚变得非常方便。开发者可以针对某一特定层进行修改或替换，而不会影响到其他层的内容。</li></ul></details><details class="details custom-block"><summary>复用性和模块化</summary><ul><li>分层设计鼓励模块化和组件化，允许开发人员通过组合不同的层来创建新的镜像，实现代码和依赖项的复用，简化了复杂应用程序的容器化过程。</li></ul></details><details class="details custom-block"><summary>安全性与隔离性</summary><ul><li>每一层的不可变特性增强了容器的安全性，因为底层镜像即使存在漏洞，在不影响其他层的情况下也可以单独修复。</li></ul></details><h3 id="docker镜像的特点" tabindex="-1">Docker镜像的特点： <a class="header-anchor" href="#docker镜像的特点" aria-label="Permalink to &quot;Docker镜像的特点：&quot;">​</a></h3><ul><li>Docker镜像层都是只读的，容器层可写的</li><li>Docker镜像有容器层和镜像层</li><li>当容器启动时，一个新的可写层被加载到镜像的顶部</li></ul><h3 id="docker镜像提交" tabindex="-1">Docker镜像提交 <a class="header-anchor" href="#docker镜像提交" aria-label="Permalink to &quot;Docker镜像提交&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #提交容器副本成为一个新的镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a=&quot;author&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 容器id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 目标镜像名：tag</span></span></code></pre></div><h3 id="docker镜像发布到阿里云" tabindex="-1">Docker镜像发布到阿里云 <a class="header-anchor" href="#docker镜像发布到阿里云" aria-label="Permalink to &quot;Docker镜像发布到阿里云&quot;">​</a></h3><ol><li><p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html" target="_blank" rel="noreferrer">阿里云开发平台</a></p></li><li><p>容器镜像服务ACR</p></li><li><p>开通，选择个人实例</p></li><li><p>创建命名空间</p></li><li><p>创建名称，点击管理</p></li><li><p>推送或拉取</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --username=aliyun6765066895</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.cn-hangzhou.aliyuncs.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #登陆</span></span></code></pre></div><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.cn-hangzhou.aliyuncs.com/upjustin/justinubuntu:[镜像版本号]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #拉取</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --username=aliyun6765066895</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.cn-hangzhou.aliyuncs.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ImageId] registry.cn-hangzhou.aliyuncs.com/upjustin/justinubuntu:[镜像版本号]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.cn-hangzhou.aliyuncs.com/upjustin/justinubuntu:[镜像版本号]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#推送</span></span></code></pre></div><h3 id="docker镜像发布到本地云" tabindex="-1">Docker镜像发布到本地云 <a class="header-anchor" href="#docker镜像发布到本地云" aria-label="Permalink to &quot;Docker镜像发布到本地云&quot;">​</a></h3><h4 id="安装-docker-registry" tabindex="-1">安装 Docker Registry <a class="header-anchor" href="#安装-docker-registry" aria-label="Permalink to &quot;安装 Docker Registry&quot;">​</a></h4><ul><li>首先，确保你的服务器上已经安装了 Docker。你可以通过官方文档或者包管理工具安装 Docker。</li><li>使用以下命令运行 Docker Registry 容器：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5000:5000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /justin/myregistry/:/tmp/registry</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged=true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span></span></code></pre></div><ul><li>验证安装：</li></ul><p>打开浏览器并访问 <code>http://&lt;your-server-ip&gt;:5000/v2/_catalog</code>，如果看到类似以下输出，说明安装成功：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;repositories&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[]}</span></span></code></pre></div><ul><li>或者使用curl查看私有库镜像</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://ip:port/v2/_catalog</span></span></code></pre></div><h4 id="配置-docker-客户端" tabindex="-1">配置 Docker 客户端 <a class="header-anchor" href="#配置-docker-客户端" aria-label="Permalink to &quot;配置 Docker 客户端&quot;">​</a></h4><ul><li>修改 Docker 配置以使用私有仓库： 编辑 Docker 配置文件 /etc/docker/daemon.json（如果不存在则创建），添加以下内容：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker/daemon.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;insecure-registries&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your-server-ip:5000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="重启-docker-服务" tabindex="-1">重启 Docker 服务 <a class="header-anchor" href="#重启-docker-服务" aria-label="Permalink to &quot;重启 Docker 服务&quot;">​</a></h4><ul><li>重启 Docker 服务使配置生效：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><h4 id="推送镜像到私有仓库" tabindex="-1">推送镜像到私有仓库 <a class="header-anchor" href="#推送镜像到私有仓库" aria-label="Permalink to &quot;推送镜像到私有仓库&quot;">​</a></h4><ul><li>构建并推送镜像到私有仓库：</li></ul><p>在构建 Docker 镜像时，使用私有仓库地址作为镜像的目标地址：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 镜像:tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Host:port/Repository:Tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-server-ip:5000/my-image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-server-ip:5000/my-image</span></span></code></pre></div><p>替换 your-server-ip 和 my-image 为你的服务器 IP 和镜像名称。</p><h4 id="从私有仓库拉取镜像" tabindex="-1">从私有仓库拉取镜像： <a class="header-anchor" href="#从私有仓库拉取镜像" aria-label="Permalink to &quot;从私有仓库拉取镜像：&quot;">​</a></h4><p>使用以下命令从私有仓库拉取镜像：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-server-ip:5000/my-image</span></span></code></pre></div><h4 id="可选增强安全性和管理" tabindex="-1">可选增强安全性和管理 <a class="header-anchor" href="#可选增强安全性和管理" aria-label="Permalink to &quot;可选增强安全性和管理&quot;">​</a></h4><ul><li>使用 TLS 加密：</li></ul><p>对于企业环境，建议使用 TLS/SSL 加密保护 Docker Registry 的通信。可以使用反向代理（如 Nginx 或 Apache）来实现这一点。</p><ul><li>添加访问控制：</li></ul><p>可以通过基本认证、OAuth 或其他认证措施来限制谁可以访问和操作私有仓库。</p><ul><li>监控和日志：</li></ul><p>配置日志记录和监控以便及时发现问题并进行故障排除。</p><h3 id="推荐本地云的可视化插件" tabindex="-1">推荐本地云的可视化插件 <a class="header-anchor" href="#推荐本地云的可视化插件" aria-label="Permalink to &quot;推荐本地云的可视化插件&quot;">​</a></h3><ul><li>Portainer:</li></ul><p>Portainer 是一个轻量级的 Docker 管理界面，支持管理本地或远程的 Docker 环境，包括私有仓库。你可以通过 Portainer 来可视化地管理你的 Docker 镜像、容器、网络等。</p><details class="details custom-block"><summary>配置</summary><p>安装 Portainer：</p><p>使用以下命令来安装 Portainer：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer_data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:8000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9443:9443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer_data:/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer/portainer-ce:latest</span></span></code></pre></div><p>该命令将下载最新的 Portainer 镜像并启动 Portainer 容器。 访问 Portainer：</p><p>打开浏览器，访问 <code>https://&lt;your-server-ip&gt;:9443</code>。 1、 首次访问时需要创建一个管理员账号。 2、 配置 Portainer 连接私有库： 登录 Portainer 后，点击左侧菜单中的 “Registries”。 点击 “Add registry” 按钮，输入你的私有库信息：</p><ul><li>Name: 取一个易于识别的名称。</li><li>Registry URL: 输入你的私有库地址。</li><li>Username: 输入你的私有库用户名。</li><li>Password: 输入你的私有库密码。 配置完成后，点击 “Add registry” 按钮保存。 使用私有库中的镜像：</li></ul><p>在 Portainer 中，点击左侧菜单中的 “Images”。 点击 “Pull image” 按钮，选择你刚刚添加的私有库作为来源，然后输入镜像名称。 点击 “Pull the image” 按钮下载镜像。</p></details><ul><li>Rancher:</li></ul><p>Rancher 是一个开源的容器管理平台，可以用来管理多个 Kubernetes 集群，同时也支持 Docker 管理和私有仓库管理。 官方网站：Rancher</p><ul><li>Docker Registry UI:</li></ul><p>Docker Registry UI 是一个简单的基于 Web 的用户界面，用于管理和浏览 Docker Registry。它可以让你通过 Web 界面查看镜像仓库、标签和镜像详情。</p><ul><li>GitLab Container Registry:</li></ul><p>如果你在使用 GitLab 进行代码托管，GitLab 的 Container Registry 提供了内置的镜像仓库管理功能，可以直接在 GitLab 中进行可视化管理镜像。</p><ul><li>Harbor:</li></ul><p>Harbor 是一个开源的企业级 Docker Registry 管理平台，提供了高级的安全性、标签管理、复制同步和多租户支持等功能。它有一个现代化的用户界面，支持管理和操作私有仓库。</p>`,65),h=[t];function n(r,p,k,o,d,c){return a(),i("div",null,h)}const F=s(l,[["render",n]]);export{g as __pageData,F as default};
