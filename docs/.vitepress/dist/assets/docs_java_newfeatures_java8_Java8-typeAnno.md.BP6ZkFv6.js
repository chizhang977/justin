import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.Dcf-1z4i.js";const c=JSON.parse('{"title":"Java8新特性-类型注解","description":"","frontmatter":{},"headers":[],"relativePath":"docs/java/newfeatures/java8/Java8-typeAnno.md","filePath":"docs/java/newfeatures/java8/Java8-typeAnno.md","lastUpdated":1716175955000}'),l={name:"docs/java/newfeatures/java8/Java8-typeAnno.md"},t=n(`<h1 id="java8新特性-类型注解" tabindex="-1">Java8新特性-类型注解 <a class="header-anchor" href="#java8新特性-类型注解" aria-label="Permalink to &quot;Java8新特性-类型注解&quot;">​</a></h1><p>Java 8 引入了一项重要的新特性——类型注解(Type Annotations)，这是对注解系统的一次扩展，允许注解出现在代码中的更多位置。这一特性为开发者提供了更强大的类型检查工具，从而提高代码的健壮性和可维护性。本文将详细介绍类型注解的概念、应用场景、相关工具、优缺点，以及类型注解规范 JSR 308。</p><h2 id="什么是类型注解" tabindex="-1">什么是类型注解？ <a class="header-anchor" href="#什么是类型注解" aria-label="Permalink to &quot;什么是类型注解？&quot;">​</a></h2><p>类型注解是指可以应用在任何使用类型的地方的注解形式。在 Java 8 之前，注解只能应用在声明的地方，例如类、方法和属性。类型注解则可以应用在以下地方：</p><ul><li>泛型参数注解：可以在泛型类型参数上使用注解，比如集合的元素类型。</li><li>方法返回类型注解：直接在方法的返回类型前添加注解，表明返回值的预期类型特征。</li><li>局部变量注解：甚至可以对局部变量的声明类型应用注解，增强局部作用域内的类型检查。</li><li>类型cast注解：在类型转换操作上使用注解，说明转换的目的类型信息。</li></ul><h2 id="类型注解的作用" tabindex="-1">类型注解的作用 <a class="header-anchor" href="#类型注解的作用" aria-label="Permalink to &quot;类型注解的作用&quot;">​</a></h2><p>类型注解的主要作用是支持在 Java 程序中进行更严格的类型检查，以便在编译时捕获潜在的运行时错误。例如，使用类型注解可以检测出可能导致 NullPointerException 的代码，从而提高代码的安全性和质量。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">注解</p><ol><li><strong>@NonNull</strong>：表示对象或变量不能为 null。它告诉编译器在这些地方不允许出现空指针异常。</li><li><strong>@Readonly</strong>：表示对象或变量是只读的，不允许修改。通常用于标记不可变对象或方法。</li><li><strong>@Critical</strong>：表示方法可能会抛出严重的异常或错误。这种注解有助于提醒开发者对于这些方法需要更加谨慎地处理异常。</li></ol></div><p>类型注解可以应用于多种场景，以下是一些常见的应用场景及示例：</p><p><strong>对象创建</strong>：在创建对象时指定其类型</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @NonNull </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>类型转换</strong>：在进行类型转换时添加注解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String) nullableStr;</span></span></code></pre></div><p><strong>泛型类型参数</strong>：在泛型类型参数中添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span></code></pre></div><p><strong>继承和实现</strong>：在类和接口的声明中添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NonNull</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span></code></pre></div><p><strong>方法接收器</strong>：在方法定义中为参数添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() @Readonly { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>方法返回值</strong>：为方法的返回值添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNonNullString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello typeAnnoation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>方法调用</strong>：在调用方法时为参数添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String ){}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) String nullableStre);</span></span></code></pre></div><p><strong>throws 子句</strong>：在方法声明中指定可能抛出的异常类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Critical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyException { }</span></span></code></pre></div><p><strong>Lambda 表达式</strong>：在 Lambda 表达式中为参数和返回值添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFunction&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String str) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>数组</strong>：在数组声明和初始化时为元素添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] strings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @NonNull </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p><strong>类型测试</strong>：在类型测试表达式中添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass) { }</span></span></code></pre></div><p><strong>对象创建</strong>：在对象创建时为构造函数参数添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String) str);</span></span></code></pre></div><p><strong>类型参数绑定</strong>：在泛型类型参数绑定中添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T extends @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T obj) { }</span></span></code></pre></div><p><strong>方法引用</strong>：在方法引用中添加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFunction&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getInt;</span></span></code></pre></div><h2 id="类型注解的优点" tabindex="-1">类型注解的优点 <a class="header-anchor" href="#类型注解的优点" aria-label="Permalink to &quot;类型注解的优点&quot;">​</a></h2><ul><li>提高代码质量：在编译时检测潜在的运行时错误，减少代码中的 bug。</li><li>增强文档性：类型注解可以明确表达代码的设计意图，增强代码的可读性和可维护性。</li><li>向下兼容：类型注解可以通过注释来实现向下兼容，使得老版本的 Java 编译器能够忽略这些注解。</li></ul><h2 id="类型注解的缺点" tabindex="-1">类型注解的缺点 <a class="header-anchor" href="#类型注解的缺点" aria-label="Permalink to &quot;类型注解的缺点&quot;">​</a></h2><ul><li>代码复杂度增加：类型注解的使用会增加代码的复杂度，对于不熟悉这一特性的新手可能不太友好。</li><li>学习成本：开发者需要花时间学习和理解类型注解及其相关工具的使用。</li></ul><h2 id="cheker-framework" tabindex="-1">Cheker Framework <a class="header-anchor" href="#cheker-framework" aria-label="Permalink to &quot;Cheker Framework&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title"><a href="http://types.cs.washington.edu/checker-framework/" target="_blank" rel="noreferrer">Checker Framework</a></p><p>Checker Framework 是一个强大的工具，它通过插件的形式嵌入到 javac 编译器中，支持使用类型注解进行更严格的类型检查。通过 Checker Framework，开发者可以在编译时检测出潜在的运行时错误，提高代码的健壮性。</p></div><h2 id="jsr-308" tabindex="-1">JSR 308 <a class="header-anchor" href="#jsr-308" aria-label="Permalink to &quot;JSR 308&quot;">​</a></h2><p>JSR 308 是 Java 8 引入类型注解的规范，它扩展了 Java 语言的句法，允许注解出现在更多的位置上，如方法接收器、泛型参数、数组、类型转换、类型测试、对象创建、类型参数绑定、类继承和 throws 子句。</p><p>JSR 308 的目标包括：</p><p>扩展注解的使用范围：允许注解出现在更多的位置上，从而提供更强的类型检查。 引入可插拔的类型系统：通过可插拔的类型系统创建功能更强大的注解处理器。 实战应用 以下是一个完整的实战示例，展示如何使用类型注解和 Checker Framework 进行更严格的类型检查：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.checkerframework.checker.nullness.qual.NonNull;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.checkerframework.checker.nullness.qual.Nullable;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String nonNullString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNonNullString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // @NonNull String shouldBeNonNull = getNullableString(); // 会在编译时报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNonNullString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 Checker Framework 进行编译：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -processor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.checkerframework.checker.nullness.NullnessChecker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Example.java</span></span></code></pre></div><p>如果尝试将 getNullableString 的返回值赋给 @NonNull 变量，编译时会报错：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Example.java:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [assignment.type.incompatible] incompatible types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assignment.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @NonNull String shouldBeNonNull </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  found</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   : @Nullable String</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: @NonNull String</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>类型注解是 Java 8 中一项重要的新特性，它使得注解可以应用在任何使用类型的地方，从而提供更强的类型检查和更清晰的代码文档化。虽然这一特性增加了代码的复杂性，但通过使用 Checker Framework 等工具，可以显著提高代码的质量和健壮性。开发者可以根据需要选择使用类型注解，以在编译时检测潜在的运行时错误，减少代码中的 bug。</p>`,55),h=[t];function p(e,k,r,d,g,E){return a(),i("div",null,h)}const y=s(l,[["render",p]]);export{c as __pageData,y as default};
