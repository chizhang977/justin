import{_ as s,c as a,o as i,a3 as t}from"./chunks/framework.Di-rThNJ.js";const c=JSON.parse('{"title":"Java8新特性-类型推断","description":"","frontmatter":{},"headers":[],"relativePath":"docs/java/newfeatures/java8/Java8-typeInference.md","filePath":"docs/java/newfeatures/java8/Java8-typeInference.md","lastUpdated":1716175955000}'),n={name:"docs/java/newfeatures/java8/Java8-typeInference.md"},h=t(`<h1 id="java8新特性-类型推断" tabindex="-1">Java8新特性-类型推断 <a class="header-anchor" href="#java8新特性-类型推断" aria-label="Permalink to &quot;Java8新特性-类型推断&quot;">​</a></h1><p>在 Java 7 和 Java 8 中，类型推断（Type Inference）的优化主要集中在针对泛型和匿名类的改进。</p><h2 id="java-7-中的类型推断优化" tabindex="-1">Java 7 中的类型推断优化： <a class="header-anchor" href="#java-7-中的类型推断优化" aria-label="Permalink to &quot;Java 7 中的类型推断优化：&quot;">​</a></h2><h3 id="菱形语法-diamond-operator" tabindex="-1">菱形语法（Diamond Operator） <a class="header-anchor" href="#菱形语法-diamond-operator" aria-label="Permalink to &quot;菱形语法（Diamond Operator）&quot;">​</a></h3><p>在 Java 7 中引入了菱形语法，即使用 &lt;&gt; 来表示泛型类型参数，可以在实例化泛型类时省略类型参数，编译器会根据上下文进行推断。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span></code></pre></div><p>改进的异常处理语法：</p><p>在 Java 7 中，异常处理语法也进行了优化，允许在 catch 块中直接使用泛型类型，而无需显式地进行类型转换。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 一些可能会抛出异常的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理 IOException</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="java-8-中的类型推断优化" tabindex="-1">Java 8 中的类型推断优化： <a class="header-anchor" href="#java-8-中的类型推断优化" aria-label="Permalink to &quot;Java 8 中的类型推断优化：&quot;">​</a></h2><h3 id="lambda-表达式的类型推断" tabindex="-1">Lambda 表达式的类型推断： <a class="header-anchor" href="#lambda-表达式的类型推断" aria-label="Permalink to &quot;Lambda 表达式的类型推断：&quot;">​</a></h3><p>在 Java 8 中，Lambda 表达式引入了目标类型推断，编译器可以根据上下文来推断 Lambda 表达式的参数类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推断出 name 是 String 类型</span></span></code></pre></div><h3 id="方法引用的类型推断" tabindex="-1">方法引用的类型推断： <a class="header-anchor" href="#方法引用的类型推断" aria-label="Permalink to &quot;方法引用的类型推断：&quot;">​</a></h3><p>类似于 Lambda 表达式，Java 8 中的方法引用也可以根据上下文推断其类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">println); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推断出 println 方法的参数类型是 String</span></span></code></pre></div><h2 id="改进的推断机制" tabindex="-1">改进的推断机制： <a class="header-anchor" href="#改进的推断机制" aria-label="Permalink to &quot;改进的推断机制：&quot;">​</a></h2><p>在 Java 8 中，编译器的类型推断机制得到了改进，使得推断结果更加准确和可靠，特别是在复杂的泛型场景下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;&gt;();</span></span></code></pre></div><h2 id="改进的方法返回值推断" tabindex="-1">改进的方法返回值推断： <a class="header-anchor" href="#改进的方法返回值推断" aria-label="Permalink to &quot;改进的方法返回值推断：&quot;">​</a></h2><p>在 Java 8 中，方法的返回值类型可以根据返回语句的上下文进行推断，无需显式地声明返回类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Java 7 和 Java 8 中对类型推断的优化使得代码更加简洁、可读，并且减少了不必要的冗余信息，提高了开发效率。特别是在使用泛型、Lambda 表达式和方法引用时，类型推断的优化让代码更加清晰和易于维护。</p>`,23),e=[h];function l(p,k,r,E,d,o){return i(),a("div",null,e)}const y=s(n,[["render",l]]);export{c as __pageData,y as default};
