import{_ as s,c as i,o as a,a4 as n,d7 as t}from"./chunks/framework.Dcf-1z4i.js";const y=JSON.parse('{"title":"原型模式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/method/dp/原型模式.md","filePath":"docs/method/dp/原型模式.md","lastUpdated":1715220742000}'),l={name:"docs/method/dp/原型模式.md"},e=n('<h1 id="原型模式" tabindex="-1">原型模式 <a class="header-anchor" href="#原型模式" aria-label="Permalink to &quot;原型模式&quot;">​</a></h1><p>原型模式属于创建型模式的一种。它的核心思想是通过复制已经存在的对象来创建新的对象，而不是通过新建实例的过程。这种模式在需要<strong>创建大量相似对象或者创建对象成本较高</strong>（比如涉及复杂初始化、数据库查询等）的场景下非常有用。</p><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>原型模式定义了对象的创建方式，通过给出一个原型实例来指明新创建的对象的类型，并且通过复制这个原型来创建新的对象。这种方式可以让新对象继承原型对象的属性和行为，从而减少对象创建过程中的复杂性。</p><h2 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h2><p><img src="'+t+`" alt="原型模式"></p><h2 id="主要角色" tabindex="-1">主要角色 <a class="header-anchor" href="#主要角色" aria-label="Permalink to &quot;主要角色&quot;">​</a></h2><ul><li><p><strong>抽象原型（Prototype）</strong>：这是一个接口或者抽象类，声明了克隆自身的方法，通常是一个名为 <code>clone()</code> 的方法。</p></li><li><p><strong>具体原型（Concrete Prototype）</strong>：实现抽象原型的类，需要实现 <code>clone()</code> 方法以提供对象的深拷贝或浅拷贝功能。具体原型类包含了对象状态的详细信息。</p></li></ul><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><ol><li><p>客户端请求创建一个新对象时，不是直接使用 <code>new</code> 操作符创建，而是向已经存在的原型对象请求一个克隆。</p></li><li><p>原型对象接收到请求后，通过自身的克隆方法创建并返回一个新的对象给客户端。这个新对象与原型对象具有相同的初始状态，但根据需要可以独立修改而不影响原型对象。</p></li><li><p>根据实现的不同，克隆可以是浅拷贝或深拷贝。</p><ol><li><p><strong>浅拷贝只复制对象的基本数据类型成员变量，而引用类型成员变量仍然指向原来的对象；</strong></p></li><li><p><strong>深拷贝则会递归复制所有层级的成员变量，使得原型和克隆对象完全独立。</strong></p><ul><li>重写clone()</li><li>通过序列化</li></ul></li></ol></li></ol><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li><strong>提高效率</strong>：对于复杂的对象创建，可以通过克隆已有对象来快速生成新对象，减少了系统开销。</li><li><strong>简化创建过程</strong>：客户端不需要了解对象创建的具体步骤，只需知道如何使用原型对象即可。</li><li><strong>易于扩展</strong>：通过增加新的具体原型类，可以轻松支持更多类型的对象创建。</li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ul><li><strong>配置管理复杂</strong>：如果原型类的属性很多，为了支持深拷贝，需要正确实现所有引用类型的复制逻辑。</li><li><strong>违反单一职责原则</strong>：如果原型类还需要负责克隆逻辑，可能使其变得复杂，不再仅关注自身的业务逻辑。</li></ul><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><ul><li>当创建新对象的成本较大时（如初始化需要复杂计算或数据库查询）。</li><li>需要创建的对象之间差异不大，可以通过修改已有对象的少量属性来获得新对象。</li><li>需要避免使用构造函数的硬编码来实例化对象，以提供更加灵活的对象创建方式。</li></ul><h2 id="实现示例-java" tabindex="-1">实现示例（Java） <a class="header-anchor" href="#实现示例-java" aria-label="Permalink to &quot;实现示例（Java）&quot;">​</a></h2><p>在Java中，可以通过实现 <code>Cloneable</code> 接口并重写 <code>clone()</code> 方法来实现原型模式。注意，Java中的 <code>clone()</code> 方法默认是浅拷贝，需要手动处理深拷贝逻辑。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cloneable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Prototype </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CloneNotSupportedException;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcretePrototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String attribute;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcretePrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> attribute;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Prototype </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CloneNotSupportedException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 实现深拷贝，如果有引用类型成员，需手动处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ConcretePrototype) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>客户端代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConcretePrototype original </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcretePrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Original Value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConcretePrototype cloned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> original.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过克隆得到新对象</span></span></code></pre></div>`,21),h=[e];function p(k,r,o,d,E,c){return a(),i("div",null,h)}const u=s(l,[["render",p]]);export{y as __pageData,u as default};
